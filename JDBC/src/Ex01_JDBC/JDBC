JDBC (Java Database Connectivity)
=> 자바와 DBMS와 연동하기 위한 기술(java 프로그램에서 sql문을 실행하기 위해서 제공되는 API
						------
						DML, DQL(Query)
						
<오라클에 접속하기 전에 해야할 일>
JVM이 인식할 수 있는 위치로 오라클 드라이버 연결
=> 코드를 실행하기 위해서 JVM이 찾을 수 있는 위치
=> 1. Build Path에서 라이브러리로 등록(application)
=> 2. web은 lib에 복사

<JDBC 연동하기>
1. 오라클 드라이버를 로딩
   실행할 때 인식할 수 있도록 메모리를 올리는 작업
   클래스를 동적으로 메모리에 로딩하는 작업.java.lang패키지의 Class라는 클래스의 forName메소드를 이용해서
   오라클 드라이버의 핵심클래스를 메모리에 올리는 작업을 먼저 해야한다.
   핵심클래스는 드라이버 클래스를 의미하며 이 드라이버 클래스는 어떤 DBMS를 쓰냐에 따라 달라진다.	
   
   [문법]
   Class.forName("핵심 클래스의 full path - 패키지를 포함한 클래스명");		
   
   [오라클]
   Class.forName("oracle.jdbc.driver.OravleDriver")	
   
   [MySQL]
   Class.forName("com.mysql.cj.jdbc.Driver");
   
2. DB서버에 연결
 => java.sql 패키지의 DriverManager클래스의 메소드를 이용해서 연결
 	public static Connection getConnection(String url, String user, String password) throws SQLException
 	
 	1) static 메소드이므로 클래스명으로 엑세스
 	2) 매개변수
 	   url: DBMS에 연결하기 위해 필요한 정보가 담겨있는 문자열
 	   		(어떤 DBMS를 사용하냐에 따라 내무에서 인식될 문자열이 다른 형식으로 제공)
 	   		[오라클]
 	   		jdbc:oracle:thin:@ip:port:데이터베이스 서비스명
 	   		----------- ------ ------
			오라클에서 사용하는      |           |_____ 오라클 설치할때 설정하는 서비스명으로 express edition버전은 xe
           	프로토콜             |                                                    
                             |____DBMS가 설치되어 있는 서버의 ip와 port(1521) 	   		
 	 [mysql]
      jdbc:mysql://ip:port/데이터베이스명                 
      user:사용자계정 (scott,hr..)
      pass:계정의 패스워드(tiger,hr..)	
 	3) 리턴타입
 	   java.sql.Connection을 리턴
 	   DriverManager클래스의 getConnection 메소드는 매개변수로 전달받은 값을 활용해서 DB서버에 연결하고 연결정보를 
 	   객체로 만들어서 리턴
 	   ----
 	   java.sql.Connection
 	   => 어떤 드라이버가 로딩되었냐에 따라 Connection의 다른 하위 객체가 리턴
 	   		-------------
 	   		어떤 DBMS를 사용하냐에 따라 다른 드라이버가 연결될 것이므로 해당드라이버에 속한 파일이 리턴
 	   		
 	   => 이 Connection의 하위 객체를 이용해서 SQL문을 실행할 때 연결정보를 받아서 할 수 있다.
 	   
3. SQL문을 실행하기 위해 객체생성   	
   Connection객체의 메소드를 이용해서 SQL문을 실행할 수 있는 객체를 생성
   [상속구조]
   +---------+
   |Statement|                  - 정적SQL을 실행할때 사용(보안에 취약)
   +---------+
        ^
        |
 +------------------+
 |PreparedStatement |           - 동적SQL을 실행할때 사용(시큐어코딩에 적합한 방식, 캐시사용)
 +------------------+
        ^
        |
 +------------------+
 |CallableStatement |           - 각 DBMS에 특화된 SQL로 작성된 명령문을 실행(PL/SQL)
 +------------------+
   	
   1) Statement객체를 이용
   	  Connection 객체가 갖고있는 createStatement메소드를 이용해서 생성
   	  [형식]
   	  Statement stmt = con.createStatement()
   	  => 어떤 DBMS를 사용하냐에 따라 다른 Statement객체가 만들어짐
   	  
4. SQL실행
   1) Statement객체 사용
      ① executeUpdate : insert, update, delete명령문을 실행
                        매개변수로 전달된 sql문을 실행
                        결과로 몇 개의 row가 반영됐는지 리턴
                        
          int result = stmt.executeUpdate(sql문)
          ----------
             몇 개의 행이 삽입, 수정, 삭제 됐는지 리턴              
      
      ② executeQuery  : select명령문을 실행
                        실행한 후 조회된 테이블을 리턴, DBMS에서 조회된 테이블을 자바에서 사용할 수 있도록 만들어 놓은 객체가 ResultSet
                        어떤 DBMS를 쓰냐에 따라 다른 하위객체가 리턴  
      
5. 결과처리
   1) insert,delete,update
      - 모두 int를 리턴하므로 동일한 방법으로 처리  
      
   2) select
      - 결과가 2차원표로 리턴, 테이블에 저장된 데이터를 자바에서 사용할 수 있도록 만들어진 객체
      - ResultSet에 저장된 데이터를 읽기 위해서 ResultSet의 메소드를 이용해서 작업
      - 레코드를 읽기 위해서 포지션이 바뀌도록 next()메소드를 호출
                                  --------
                                    다음 레코드로 포지션을 이동(Cursor)
      - 한 번에 하나의 컬럼만을 읽을 수 있다.
      - 레코드 갯수만큼 반복 작업을 수행해야 한다.
      - 한 레코드의 컬럼을 읽기 위해서 ResultSet에 getXXXX메소드가 지원된다. 
                                       ------------
                                        오라클 컬럼의 타입에 따라 선택
      
        오라클타입이 varchar2나 char : java의 String
                                  getString(컬럼명)
                                  getString(컬럼index)
                                            ---------
                                             원본데이터의 컬럼순서가 아니라 조회된 테이블의 컬럼순서
                                             index는 1부터 시작
        오라클타입이 number이면 java의 int : getInt(컬럼명)
        오라클타입이 date이면 java의 java.sql.Date: getDate(컬럼명)
                                                   
      - 반복작업
        while(rs.next()){ -> true/false를 리턴(레코드가 있으면 true,없으면 false리턴)
             //레코드의 각 컬럼을 읽기
        }
        
6. 자원반납
   - 클라이언트가 점유해서 사용하던 자원을 반납해야 한다.
   - Connection , Statemnet, ResultSet까지 모든 자원을 반납
   - close메소드를 이용해서 처리
   - 만들어진 순서가 아니라 가장 마지막에 생성된 객체부터 반납



  [미션]
  1. UpdateTest.java
     - 하나하나 모두 입력해서 테스트
     - addr이 서울시인 모든 레코드의 addr을 서울특별시로 변경하기
     
  2. DeleteTest.java
     - UpdateTest.java를 save as해서 sql문만 변경하고 테스트해보기
     - id가 test인 레코드를 삭제   
   
   
  [미션]
  1. PerparedUpdateTest.java
     - UpdateTest를 save as해서 PreparedInsertTest처럼 메소드로 분리하기
     - Scanner이용해서 값을 입력받아 처리하도록 변경
     기존 주소:____
     변경할 주소:_____
      
  2. PreparedDeleteTest.java
     -1번과 동일
     삭제할 아이디:_____
     
  3. PreparedSelectTest.java
     - 1번과 동일
     
  4. PreparedLoginTest.java
     - 1번과 동일
     - 자원반납추가
      
      아이디:______
      패스워드:_______   	  
   	  
   	  
   	   	   		
 	   		
 	   		
 	   		