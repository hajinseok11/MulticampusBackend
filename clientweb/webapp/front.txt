html
1. 요청
	web application 폴더 (dynamic web project)에 저장된 application이 실행되도록 요청하는 방법
	http://127.0.0.1:8088/clientweb/html/basic.html
	------	 -------------	------	-------------	----------------------
	프로토콜 		ip		port	 context명	application파일명 (폴더포함)
	
2. 이미지파일
		1) 절대경로
			현재 문서의 위치를 기준으로 경로를 파악할 수 있도록 full name을 모두 명시
																												--------------
																												서버의 ip와 port도 명시
			=> ip가 생략이 가능
			=> path가 /로 시작하면 절대경로의 의미
			=> /는 root를 의미
			http://192.168.0.3:8088/clientweb/images/bts1.jpg
		2) 상대경로
			=> 현재 문서의 위치를 기준으로 src에 명시된 경로를 찾는다.
			=> 현재 요청된 문서의 위치를 기준으로 src에 명시된 경로를 찾는다.
			<img src = "clientweb/images/bts2.jpg"/>
			현재 문서의 위치 imagestest.html문서의 위치가 /clientweb/html이 위치이므로 이 위치에서
			clientweb/images/bts2.jpg을 찾는다.
			=> . : 현재 디렉토리를 의미
			=> .. : 상위 디렉토리를 의미
			3) 하이퍼링크
			- 클릭하면 다른 문서나 사이트로 이동할 수 있도록 연결
			- 문서 내에서 이동 가능
			- <a> 태그를 이용
			- <a> 클릭할 문자열이나 이미지 <a>
			href 속성 : 연결할 문서나 사이트 주소
			target속성 : 하이퍼링크로 연결된 문서가 실행될 위치
						_self : 현재 문서 위에서 연결
						_blank : 새 탭에서 실행
			
CSS (Cascading Style Sheets)
1. 개요
	- 웹 문서를 구성하는 구성요소에 스타일을 적용하거나 레이아웃을 설정하기 위해서 사용
	- HTML을 이용해서 구성요소를 정의하고 CSS를 이용해서 꾸미고 Javascript를 이용해서 동작을 정의
	- 계단 처럼 단계적으로 스타일을 적용
	
2. CSS에서 작업할 일
	- 사용방법
	- 선택자
	- 기본속성
	- 텍스트관련
	- 기타(테이블, 배경, 리스트)
	- 박스모델
	- 포지셔닝
	- 플로팅과 레이아웃
	
3. CSS사용방법
	선택자	{
	-----
	CSS 적용할 대상
		속성1:속성값1;
		속성2:속성값2;
		
			......
	}
	[선택자]
		HTML내에서 어떤 컨텐츠에 CSS를 적용할 것인지 정의할 목적
		태그, class, id, 가상클래스, 가상컨텐츠 , 속성
		
	1) <head> 태그 안에 정의하고 사용하는 방법
	2) inline으로 선언하고 사용
		<시작태그 style="속성1:속성값1; 속성2:속성값2;.....">내용</종료태그>
		가장 우선 순위가 높다.
		정의된 태그에만 스타일 시트가 적용된다.
	
	3) 외부파일로 정의하고 사용
	<link rel = "stylesheet" type="text/css" href ="../common/css/mystyle.css">
		-------------------  --------------- ---------------------------------
		현재 연결된 문서가			MIME타입		 		연결할 문서의 path
		어떤 것과 연관이 있는지		브라우저가 해석할 수
		명시						있도록 response에
								대한 타입을 정확하게 명시
								
4. 선택자
	우선순위
	! important > id선택자 > class선택자 > 태그선택자 > 전체선택자(*)
							복합구성선택자...
							...

	우선순위가 동일한 경우 => 마지막에 해석된 CSS가 우선
	1) 전체 선택자
		* 
		=> 모든 요소를 선택
	2) 태그 선택자
		(1) 태그명
		  태그명 {
		  		속성:속성값
		  		....
		  }
		  => 정의한 태그를 모두 선택해서 속성을 적용
		  
		(2) 태그명, 태그명...
		  여러 태그에 동일한 서식을 적용하기 위해서
		  태그명1, 태그명2 {
		  
		  }
	3) class 선택자
		.class 속성명 {
			속성:속성값
	  		....
		}
		- 정의한 class 속성명에 해당하는 요소만 속성을 적용
		- class 속성은 모든 태그에 정의하고 사용할 수 있는 속성
		- 중복해서 정의가 가능
			(동일한 class명을 여러 요소에 정의할 수 있다.)
		- 동일한 서식을 태그와 상관없이 여러 곳에 정의할 때 사용
		
	4) id 선택자
		#id명{
			속성: 속성값
				...
		}
		- 태그에 id속성으로 정의되는 요소에 css를 적용
		- 식별하기 위해 사용하는 선택자이므로 한 페이지에서 동일한 id는 정의하지 않는다.
		- javascript나 jQuery에서 사용
		  
	5) 복합구성선택자
		(1) 선택자1선택자2(태그명클래스명)
			아래 정의된 두 가지 조건을 모두 만족하는 요소가 선택
			태그명.클래스명 {
				속성:속성값
				....
			}
			ex)
			p.myclass{
			
			}
			=> p태그들 중에서 class속성이 myclass로 정의된 요소를 선택
			
		(2) 선택자1 > 선택자2
			=> 선택자1의 자식요소 선택자 2를 선택
			=> 바로 아래의 하위요소만 선택
			div > .myclass
			div의 바로 아래 하위요소 중 class속성이 myclass인 요소를 선택
			
		(3) 선택자1 선택자2
			=> 띄어쓰기가 구분기호
			=> 선택자 1의 하위요소인 선택자 2를 선택
			   ----------------		
			   	선택자1의 모든 하위요소
			   	
			  div .myclass
			  div의 하위요소 중에서 class속성이 myclass인 모든하위요소를 선택 	
		  
		(4) 선택자1 + 선택자2
			- 형제요소를 선택하기 위한 방법
			- 선택자1의 바로 다음 형제요소인 선택자2를 선택
			.css + li {
			
			}
			css라는 클래스 속성으로 정의된 요소의 다음 형제요소인 li선택
			
		(5) 선택자1 ~ 선택자2
			- 형제 요소를 선택하기 위한 방법
			- 선택자1의 다음 형제 요소 중에서 선택자2에 해당하는 모든 요소를 선택
	
	6) 가상선택자
		- 어떤 상태가 발생했을 때를 선택자로 활용하는 경우 사용
		- 선택자 : 상태
		(1) a:link
		(2) a:visited
		(3) 선택자:hover
		(4) 선택자:active
			- 마우스로 요소를 선택하고 있는 동안의 상태를 선택자로 활용
			- 마우스 클릭을 계속 유지하는 동안을 의미
		(5) 선택자:first-child
			선택자:last-child
			
5.박스모델
	flex
	=> 박스모델에서 flex를 적용해서 레이아웃을 관리할 수 있다.
	align-items: 한 줄을 기준으로 정렬
	align-content:flex 컨테이너의 모든 하위요소에 적용, 여러 줄의 아이템이 있을 때 의미가 있다
	flex컨테이너의 모든 하위 요소를 묶어서 정렬
	
6. 포지셔닝
	-웹 문서를 구성하는 컨텐츠의 위치를 정하고 배치하는 것이 포지셔닝
	- 웹 문서의 레이아웃과 연관이 있는 속성
	1) 포지셔닝의 종류
		(1) 상대위치
			- 원래 기본으로 그려져야 하는 자신의 위치를 기준으로 위치가 적용
		(2) 절대위치
			- 절대위치를 지정하는 방법
			- 문서를 기준으로 위치가 정해지므로 좌표속성에 지정한 값의 위치로 이동
			- 상위 요소를 기준으로 이동한다.
			- 문서를 기준으로 배치가 되므로 윈도우의 해상도와 상관없이 무조건 보인다.
		(3) 고정위치
			- absolute처럼 기준위치(top:0 left:0)에 좌표 속성에 따라서 이동
			- 상위요소에 영향을 받지않고 이동
			- 윈도우 기준으로 움직이므로 윈도우를 기준으로 위치값을 계산하고 윈도우의 해상도를 벗어나면 안보인다.
		(4) 정적위치
			-position속성을 설정하지 않았을 때 원래 기본 흐름대로 출력
			위 -> 아래
			왼쪽 -> 오른쪽
			- 좌표속성을 사용할 수 없다.
			- 상위 요소를 기준으로 움직임
			
7. 	플로팅
	화면배치
	플로팅을 적용하지 않는 부분이 플로팅 영향을 받을 수 있으므로 플로팅이 적용되지 않도록 clear해야한다.


javascript

1. 자바스크립트 사용방법
	1) body태그 내부에 정의
	2) head태그 내부에 정의
	3) 외부문서
	4) inline으로 태그 내부에 정의
		- 이벤트 핸들러
2. 문법
	1) 명령문 만들기
	2) 변수
		변수 선언문 변수명 = 값
		변수 = 값;
		var 변수 = 값;
		let 변수 = 값;
		
		- 자바스크립트는 변수를 선언할 때 타입을 선언하지 않지만 내부적으로 타입은 존재
		- ECMAScript6 버전 이전은 var키워드만 이용해서 변수를 선언하고 정의
		- ECMAScript6 버전 이후에 let과 const가 추가
		
		(1) var
			=> 변수를 선언한 후 중복(재) 선언 가능
		(2) let
			=> 변수를 선언하고 내부에서 중복 선언이 불가능
			
		(3) const - 상수정의
			상수는 변경될 수 없는 고정된 값
			상수로 변수를 정의하면 할당된 값을 변경할 수 없다.
					
	3) 연산자
	
	4) 조건제어구문
	
		-if, switch
		
		(1) if(조건){
			// 조건을 만족하는 경우 실행할 문장
		}
		
		
		if(조건){
			// 조건을 만족하는 경우 실행할 문장
		}else{
			// 조건을 만족하지 않는 경우 실행할 문장
		}
		
		[if ~else if ~ else if ..... else]
		if (조건) {
		
		} else if (조건2) {
		
		} else if (조건3) {
		
		} ......
		
		} else {
		
		}
		
		(2) switch
			switch (조건을 평가할 수 있는 변수, 조건을 평가할 수 있는 연산식, 조건을 평가할 수 있는 메소드 호출문...){
				case 평가할 값 1 :
				case 평가할 값 2 :
				case 평가할 값 3 :
				case 평가할 값 4 :
				...
				
				default:
					문장
			}
			
			- 조건을 평가할 수 있는 변수, 식, 메소드 호출문
			- case에서는 정확하게 일치하는 값만 정의하고 비교
			- 각 case별로 break를 추가
			  기본 특성이 조건에 만족하는 case문만 실행해야 하는데 조건에 만족하는 case문 이하 모든 case문들을 실행함.
			- default가 if문에서 else와 동일
			- 다중 if를 대신해서 사용할 목적
			- 보통은 코드값 등을 비교할 목적
		
	5) 반복 제어구문
		-for, while, do-while

3. 함수
	1) 함수를 선언하고 호출하는 방법
	2) 함수와 변수의 호이스팅
		- 웹 브라우저에서 자바스크립트를 해석할 때 함수 선언부를 가장 먼저 해석한다.
		- global영역에 선언된 변수나 함수를 자바스크립트 인터프리터가 최우선의 영역으로 끌어올려서 global영역에 추가한다.
		이를 호이스팅이라 한다.
		- global영역에 추가되는 것들이 많게 되면 실제 실행될 코드의 실행 시점이 늦어질 수 있다.
		- var로 선언된 변수는  global영역에 끌어올려서 해석한다.
		- let으로 선언된 변수는 호이스팅이 발생하지 않는다.
		- 표현식으로 함수를 정의하면 함수의 호이스팅이 발생하지 않는다.
	3) 표현식으로 함수 정의하기
		- = 연산자를 이용해서 변수에 함수를 할당해서 사용
		- 정의된 함수를 할당한 변수가 함수의 이름으로 쓰여짐

		[형식]
		(1) 이름이 있는 함수의 표현식
		var 변수명 = function 함수명(매개변수...){
			// 실행할 코드
		}

		함수명() ------ x (잘못된 방식)
		변수명() ------ o (변수명을 함수명 처럼 사용하므로 원래 함수이름은 사용할 수 없다.)
		(2) 익명함수의 사용 (이름이 없는 함수의 표현식)
		var 변수명 = function(매개변수 list){
			// 실행할 코드
		}
		=> 익명함수는 표현식으로 주로 사용하거나 매개변수에서 함수를 정의하고 바로 사용하는 경우 많이 사용
	4) 고차함수	
		다른 함수를 매개변수로 받을 수 있는 함수
		map, forEach, filter...

	5) 콜백함수
		다른 함수에 매개변수로 전달되는 함수, 비동기 작업을 처리할 때 사용 

4. 이벤트
- 웹 브라우저에 마우스나 키보드의 여러 움직임을 발생시키는 것을 이벤틀 한다.
  즉, 사용자가 웹페이지에서 마우스나 키보드를 가지고 하는 모든 행위
- 이벤트 종류
	click
	dbclick

5. 내장객체
- 브라우저마다 자바스크리브를 해석하고 실행할 수 있는 엔진이 탑재(프로그램이 포함)되어있다.
- 자바스크립트 엔진에 포함된 객체를 내장객체라 한다.

[객체를 사용하는 방법]
브라우저에 포함된 자바스크립트 엔진이 내장하고 있는 객체를 사용하기 위해서
엔진에 포함된 자바스크립트 인터프리터가 실행될 때 인식할 수 있도록 만들어야 하는데 이를 객체 생성이라 한다.
																																											------------
																																	    인스턴스 생성

let(var, const) 변수명 = new 내장객체명()
1) Date객체
2) Math객체
3) String 객체
4) Array객체

6. 브라우저객체
- html의 구성요소를 접근하기 위한 표준 방법을 활용해서 접근
																---------------
											DOM의 접근방식을 활용
											id, tag, class와 같은 선택자를 이용해서 접근
	[window객체]
	1) 대화상자와 관련된 메소드
		-	alert
		-	confirm
		-	prompt

	2) popup
	  	-  open : 새 창 실행
		-  close : 창 닫기
		-  opener 객체 : popup창을 오픈해준 윈도우

	3) 데이터 처리
		- parseInt : 숫자모양을 한 문자열을 숫자로 변환
		- isNaN : 입력한 문자열이 숫자인지 문자인지 판단 (데이터타입을 확인하지 않고 문자모양만 가지고 판단)
		  문자:true, 숫자:false
		- eval : 매개변수로 전달된 메세지를 실제로 실행(보안에 취약)
		- trim	: 공백을 제거


7. DOM(Documetn Object Model)
- 문서기반
- html문서를 구성하는 태그들을 모두 객체 정의하고 관리
- w3c 국제표준화기구(웹 표준화 작업)에서 정한 객체 모델
- html문서의 구성요소를 객체로 정의하고 계층구조의 형태로 관리(트리구조)
- 웹 페이지의 문서의 요소를 제어하기 위해서 지켜야 하는 규칙
- 플랫폼이나 언어에 상관없이 컨텐츠 구조를 동적으로 제어하고 엑세스할 수 있도록 표준으로 정해놓은 약속

8. JQuery 
	// 문서가 모두 로드되고 DOM객체가 랜더링 된 후에 작업을 시작하겠다는 의미
	$(document).ready(function(){
            alert("jQuery시작");
    });
	=> window.onload = function(){
	}

	1) jQuery 문법
	$("선택자").동작()
	- -------  -----
	|    |		|
	|	 |		|_____jQuery의 js파일에 미리 정의되어있는 기술들
	|    |
	|    |_______css와 동일 : html의 구성요소를 가져오기 위해 정의(tag명, class속성, id속성, 다양한 선택자...)
	|
	|______jQuery를 의미
		   jQuery의 약식기호

	=> 무엇을 어떻게
		---   ---
		선택자 	이벤트와 함께 동작
	2) 이벤트
		$(선택자).on(이벤트명, 함수)
		=> 이벤트가 발생했을 때 함수를 실행하겠다는 의미(정식으로 jQuery에서 이벤트를 사용하는 방법)
			동적으로 생성된 요소에 이벤트를 연결할 때 사용
		ex) $("#id").on("click",함수)

		$ (선택자).이벤트명(함수)
		ex) $("#id").click(함수)
	3) 기능
		- DOM
		- Ajax
		- Effect
		- 플러그인

[중급 - 백엔드 연동]
1. JSON
2. Ajax
3. 프로토타입

[고급]
자바스크립트 프레임워크 및 라이브러리

js


	
	
	
	
	
	



			
			
			